const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    console.log("üöÄ ÈÉ®ÁΩ≤ÂÆåÂÖ®Êó†ÈôêÂà∂ÁöÑUSDCÂêàÁ∫¶...");
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log("ÈÉ®ÁΩ≤ËÄÖÂú∞ÂùÄ:", deployer.address);
    
    // Ëé∑ÂèñË¥¶Êà∑‰ΩôÈ¢ù
    const balance = await ethers.provider.getBalance(deployer.address);
    console.log("ÈÉ®ÁΩ≤ËÄÖ‰ΩôÈ¢ù:", ethers.formatEther(balance), "ETH");
    
    console.log("\nüìù ÈÉ®ÁΩ≤UnlimitedUSDCFaucetÂêàÁ∫¶...");
    
    // ÈÉ®ÁΩ≤UnlimitedUSDCFaucetÂêàÁ∫¶
    const UnlimitedUSDCFaucet = await ethers.getContractFactory("UnlimitedUSDCFaucet");
    const unlimitedUSDC = await UnlimitedUSDCFaucet.deploy();
    await unlimitedUSDC.waitForDeployment();
    
    console.log("‚úÖ UnlimitedUSDCFaucetÈÉ®ÁΩ≤ÊàêÂäü!");
    const contractAddress = await unlimitedUSDC.getAddress();
    console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", contractAddress);
    
    // È™åËØÅÂêàÁ∫¶Áä∂ÊÄÅ
    console.log("\nüîç È™åËØÅÂêàÁ∫¶Áä∂ÊÄÅ...");
    const name = await unlimitedUSDC.name();
    const symbol = await unlimitedUSDC.symbol();
    const decimals = await unlimitedUSDC.decimals();
    const totalSupply = await unlimitedUSDC.totalSupply();
    const faucetEnabled = await unlimitedUSDC.faucetEnabled();
    
    console.log("‰ª£Â∏ÅÂêçÁß∞:", name);
    console.log("‰ª£Â∏ÅÁ¨¶Âè∑:", symbol);
    console.log("‰ª£Â∏ÅÁ≤æÂ∫¶:", decimals);
    console.log("ÂàùÂßãÊÄª‰æõÂ∫îÈáè:", ethers.formatUnits(totalSupply, decimals), symbol);
    console.log("Ê∞¥ÈæôÂ§¥ÂêØÁî®Áä∂ÊÄÅ:", faucetEnabled);
    
    // ÊµãËØïmintÂäüËÉΩ
    console.log("\nüß™ ÊµãËØïmintÂäüËÉΩ...");
    const testAmount = ethers.parseUnits("1000000", decimals); // 1M USDC
    
    console.log("ÊµãËØïmint 1,000,000 USDC...");
    const mintTx = await unlimitedUSDC.faucetMint(testAmount);
    await mintTx.wait();
    
    const deployerBalance = await unlimitedUSDC.balanceOf(deployer.address);
    console.log("ÈÉ®ÁΩ≤ËÄÖUSDC‰ΩôÈ¢ù:", ethers.formatUnits(deployerBalance, decimals), symbol);
    
    // ÊµãËØï‰æøÊç∑ÂáΩÊï∞
    console.log("\nÊµãËØï‰æøÊç∑mintÂáΩÊï∞...");
    const millionTx = await unlimitedUSDC.mintMillion();
    await millionTx.wait();
    
    const newBalance = await unlimitedUSDC.balanceOf(deployer.address);
    console.log("mintÁôæ‰∏áÂêé‰ΩôÈ¢ù:", ethers.formatUnits(newBalance, decimals), symbol);
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        timestamp: new Date().toISOString(),
        network: "arbitrum-sepolia",
        deployer: deployer.address,
        contracts: {
            UnlimitedUSDCFaucet: {
                address: contractAddress,
                name: name,
                symbol: symbol,
                decimals: decimals,
                features: [
                    "Êó†ÈôêÂà∂mint",
                    "Êó†ÂÜ∑Âç¥Êó∂Èó¥",
                    "Êó†Êï∞ÈáèÈôêÂà∂",
                    "‰ªª‰ΩïÂú∞ÂùÄÂèØÁî®",
                    "‰æøÊç∑ÂáΩÊï∞ÊîØÊåÅ"
                ]
            }
        },
        txHashes: {
            deployment: unlimitedUSDC.deployTransaction.hash,
            testMint: mintTx.hash,
            millionMint: millionTx.hash
        }
    };
    
    // ‰øùÂ≠òÂà∞ÈÖçÁΩÆÊñá‰ª∂
    const configDir = path.join(__dirname, "../config");
    if (!fs.existsSync(configDir)) {
        fs.mkdirSync(configDir, { recursive: true });
    }
    
    const configPath = path.join(configDir, "unlimited-usdc-deployment.json");
    fs.writeFileSync(configPath, JSON.stringify(deploymentInfo, null, 2));
    
    console.log("\nüíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞:", configPath);
    
    // ÂàõÂª∫ÂâçÁ´ØÈÖçÁΩÆ
    const frontendConfig = {
        UNLIMITED_USDC_ADDRESS: contractAddress,
        UNLIMITED_USDC_ABI: [
            "function faucetMint(uint256 amount) external",
            "function mintTo(address to, uint256 amount) external", 
            "function mintPreset(uint8 preset) external",
            "function mintMillion() external",
            "function mintTenMillion() external",
            "function balanceOf(address account) external view returns (uint256)",
            "function decimals() external pure returns (uint8)",
            "function name() external view returns (string)",
            "function symbol() external view returns (string)",
            "function canMint(address user, uint256 amount) external view returns (bool, string)",
            "function getFaucetStats() external view returns (bool, uint256)"
        ]
    };
    
    const frontendConfigPath = path.join(configDir, "unlimited-usdc-frontend.json");
    fs.writeFileSync(frontendConfigPath, JSON.stringify(frontendConfig, null, 2));
    
    console.log("üíª ÂâçÁ´ØÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞:", frontendConfigPath);
    
    console.log("\nüéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ");
    console.log("=".repeat(50));
    console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", contractAddress);
    console.log("ÁâπÊÄß: ÂÆåÂÖ®Êó†ÈôêÂà∂mintÔºåÊµãËØïÁΩë‰∏ìÁî®");
    console.log("‰ΩøÁî®ÊñπÊ≥ï:");
    console.log("- faucetMint(amount): mint‰ªªÊÑèÊï∞Èáè");
    console.log("- mintMillion(): Âø´ÈÄümint 100‰∏á");
    console.log("- mintTenMillion(): Âø´ÈÄümint 1000‰∏á");
    console.log("=".repeat(50));
    
    return {
        unlimitedUSDC: contractAddress,
        deploymentInfo
    };
}

// ÊâßË°åÈÉ®ÁΩ≤
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });